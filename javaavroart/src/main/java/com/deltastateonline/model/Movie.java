/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.deltastateonline.model;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Movie extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Movie\",\"namespace\":\"com.deltastateonline.model\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"duration\",\"type\":\"int\"},{\"name\":\"genre\",\"type\":\"int\"},{\"name\":\"director\",\"type\":\"string\"},{\"name\":\"actors\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Actor\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"gender\",\"type\":\"string\"},{\"name\":\"age\",\"type\":\"int\"}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence name;
  @Deprecated public int duration;
  @Deprecated public int genre;
  @Deprecated public java.lang.CharSequence director;
  @Deprecated public java.util.List<com.deltastateonline.model.Actor> actors;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Movie() {}

  /**
   * All-args constructor.
   */
  public Movie(java.lang.CharSequence name, java.lang.Integer duration, java.lang.Integer genre, java.lang.CharSequence director, java.util.List<com.deltastateonline.model.Actor> actors) {
    this.name = name;
    this.duration = duration;
    this.genre = genre;
    this.director = director;
    this.actors = actors;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return duration;
    case 2: return genre;
    case 3: return director;
    case 4: return actors;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = (java.lang.CharSequence)value$; break;
    case 1: duration = (java.lang.Integer)value$; break;
    case 2: genre = (java.lang.Integer)value$; break;
    case 3: director = (java.lang.CharSequence)value$; break;
    case 4: actors = (java.util.List<com.deltastateonline.model.Actor>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'duration' field.
   */
  public java.lang.Integer getDuration() {
    return duration;
  }

  /**
   * Sets the value of the 'duration' field.
   * @param value the value to set.
   */
  public void setDuration(java.lang.Integer value) {
    this.duration = value;
  }

  /**
   * Gets the value of the 'genre' field.
   */
  public java.lang.Integer getGenre() {
    return genre;
  }

  /**
   * Sets the value of the 'genre' field.
   * @param value the value to set.
   */
  public void setGenre(java.lang.Integer value) {
    this.genre = value;
  }

  /**
   * Gets the value of the 'director' field.
   */
  public java.lang.CharSequence getDirector() {
    return director;
  }

  /**
   * Sets the value of the 'director' field.
   * @param value the value to set.
   */
  public void setDirector(java.lang.CharSequence value) {
    this.director = value;
  }

  /**
   * Gets the value of the 'actors' field.
   */
  public java.util.List<com.deltastateonline.model.Actor> getActors() {
    return actors;
  }

  /**
   * Sets the value of the 'actors' field.
   * @param value the value to set.
   */
  public void setActors(java.util.List<com.deltastateonline.model.Actor> value) {
    this.actors = value;
  }

  /** Creates a new Movie RecordBuilder */
  public static com.deltastateonline.model.Movie.Builder newBuilder() {
    return new com.deltastateonline.model.Movie.Builder();
  }
  
  /** Creates a new Movie RecordBuilder by copying an existing Builder */
  public static com.deltastateonline.model.Movie.Builder newBuilder(com.deltastateonline.model.Movie.Builder other) {
    return new com.deltastateonline.model.Movie.Builder(other);
  }
  
  /** Creates a new Movie RecordBuilder by copying an existing Movie instance */
  public static com.deltastateonline.model.Movie.Builder newBuilder(com.deltastateonline.model.Movie other) {
    return new com.deltastateonline.model.Movie.Builder(other);
  }
  
  /**
   * RecordBuilder for Movie instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Movie>
    implements org.apache.avro.data.RecordBuilder<Movie> {

    private java.lang.CharSequence name;
    private int duration;
    private int genre;
    private java.lang.CharSequence director;
    private java.util.List<com.deltastateonline.model.Actor> actors;

    /** Creates a new Builder */
    private Builder() {
      super(com.deltastateonline.model.Movie.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.deltastateonline.model.Movie.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.duration)) {
        this.duration = data().deepCopy(fields()[1].schema(), other.duration);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.genre)) {
        this.genre = data().deepCopy(fields()[2].schema(), other.genre);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.director)) {
        this.director = data().deepCopy(fields()[3].schema(), other.director);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.actors)) {
        this.actors = data().deepCopy(fields()[4].schema(), other.actors);
        fieldSetFlags()[4] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Movie instance */
    private Builder(com.deltastateonline.model.Movie other) {
            super(com.deltastateonline.model.Movie.SCHEMA$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.duration)) {
        this.duration = data().deepCopy(fields()[1].schema(), other.duration);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.genre)) {
        this.genre = data().deepCopy(fields()[2].schema(), other.genre);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.director)) {
        this.director = data().deepCopy(fields()[3].schema(), other.director);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.actors)) {
        this.actors = data().deepCopy(fields()[4].schema(), other.actors);
        fieldSetFlags()[4] = true;
      }
    }

    /** Gets the value of the 'name' field */
    public java.lang.CharSequence getName() {
      return name;
    }
    
    /** Sets the value of the 'name' field */
    public com.deltastateonline.model.Movie.Builder setName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'name' field has been set */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'name' field */
    public com.deltastateonline.model.Movie.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'duration' field */
    public java.lang.Integer getDuration() {
      return duration;
    }
    
    /** Sets the value of the 'duration' field */
    public com.deltastateonline.model.Movie.Builder setDuration(int value) {
      validate(fields()[1], value);
      this.duration = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'duration' field has been set */
    public boolean hasDuration() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'duration' field */
    public com.deltastateonline.model.Movie.Builder clearDuration() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'genre' field */
    public java.lang.Integer getGenre() {
      return genre;
    }
    
    /** Sets the value of the 'genre' field */
    public com.deltastateonline.model.Movie.Builder setGenre(int value) {
      validate(fields()[2], value);
      this.genre = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'genre' field has been set */
    public boolean hasGenre() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'genre' field */
    public com.deltastateonline.model.Movie.Builder clearGenre() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'director' field */
    public java.lang.CharSequence getDirector() {
      return director;
    }
    
    /** Sets the value of the 'director' field */
    public com.deltastateonline.model.Movie.Builder setDirector(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.director = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'director' field has been set */
    public boolean hasDirector() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'director' field */
    public com.deltastateonline.model.Movie.Builder clearDirector() {
      director = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'actors' field */
    public java.util.List<com.deltastateonline.model.Actor> getActors() {
      return actors;
    }
    
    /** Sets the value of the 'actors' field */
    public com.deltastateonline.model.Movie.Builder setActors(java.util.List<com.deltastateonline.model.Actor> value) {
      validate(fields()[4], value);
      this.actors = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'actors' field has been set */
    public boolean hasActors() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'actors' field */
    public com.deltastateonline.model.Movie.Builder clearActors() {
      actors = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public Movie build() {
      try {
        Movie record = new Movie();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.duration = fieldSetFlags()[1] ? this.duration : (java.lang.Integer) defaultValue(fields()[1]);
        record.genre = fieldSetFlags()[2] ? this.genre : (java.lang.Integer) defaultValue(fields()[2]);
        record.director = fieldSetFlags()[3] ? this.director : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.actors = fieldSetFlags()[4] ? this.actors : (java.util.List<com.deltastateonline.model.Actor>) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
